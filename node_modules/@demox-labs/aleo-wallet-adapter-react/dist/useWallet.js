"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useWallet = exports.WalletContext = void 0;
const react_1 = require("react");
const EMPTY_ARRAY = [];
const DEFAULT_CONTEXT = {
    autoConnect: false,
    connecting: false,
    connected: false,
    disconnecting: false,
    select(_name) {
        console.error(constructMissingProviderErrorMessage('get', 'select'));
    },
    connect(_decryptPermission, _network, _programs) {
        return Promise.reject(console.error(constructMissingProviderErrorMessage('get', 'connect')));
    },
    disconnect() {
        return Promise.reject(console.error(constructMissingProviderErrorMessage('get', 'disconnect')));
    },
    signMessage(_message) {
        return Promise.reject(console.error(constructMissingProviderErrorMessage('get', 'signMessage')));
    },
    decrypt(_cipherText, _tpk, _programId, _functionName, _index) {
        return Promise.reject(console.error(constructMissingProviderErrorMessage('get', 'decrypt')));
    },
    requestRecords(_program) {
        return Promise.reject(console.error(constructMissingProviderErrorMessage('get', 'requestRecords')));
    },
    requestTransaction(_transaction) {
        return Promise.reject(console.error(constructMissingProviderErrorMessage('get', 'requestTransaction')));
    },
    requestExecution(_execution) {
        return Promise.reject(console.error(constructMissingProviderErrorMessage('get', 'requestExecution')));
    },
    requestBulkTransactions(_transactions) {
        return Promise.reject(console.error(constructMissingProviderErrorMessage('get', 'requestBulkTransactions')));
    },
    requestDeploy(_deployment) {
        return Promise.reject(console.error(constructMissingProviderErrorMessage('get', 'requestDeploy')));
    },
    transactionStatus(_transactionId) {
        return Promise.reject(console.error(constructMissingProviderErrorMessage('get', 'transactionStatus')));
    },
    getExecution(_transactionId) {
        return Promise.reject(console.error(constructMissingProviderErrorMessage('get', 'getExecution')));
    },
    requestRecordPlaintexts(_program) {
        return Promise.reject(console.error(constructMissingProviderErrorMessage('get', 'requestRecordPlaintexts')));
    },
    requestTransactionHistory(_program) {
        return Promise.reject(console.error(constructMissingProviderErrorMessage('get', 'requestTransactionHistory')));
    }
};
Object.defineProperty(DEFAULT_CONTEXT, 'wallets', {
    get() {
        console.error(constructMissingProviderErrorMessage('read', 'wallets'));
        return EMPTY_ARRAY;
    },
});
Object.defineProperty(DEFAULT_CONTEXT, 'wallet', {
    get() {
        console.error(constructMissingProviderErrorMessage('read', 'wallet'));
        return null;
    },
});
Object.defineProperty(DEFAULT_CONTEXT, 'publicKey', {
    get() {
        console.error(constructMissingProviderErrorMessage('read', 'publicKey'));
        return null;
    },
});
function constructMissingProviderErrorMessage(action, valueName) {
    return ('You have tried to ' +
        ` ${action} "${valueName}"` +
        ' on a WalletContext without providing one.' +
        ' Make sure to render a WalletProvider' +
        ' as an ancestor of the component that uses ' +
        'WalletContext');
}
exports.WalletContext = (0, react_1.createContext)(DEFAULT_CONTEXT);
function useWallet() {
    return (0, react_1.useContext)(exports.WalletContext);
}
exports.useWallet = useWallet;
//# sourceMappingURL=useWallet.js.map