import { BaseMessageSignerWalletAdapter, EventEmitter, WalletName, WalletReadyState, DecryptPermission, WalletAdapterNetwork, AleoTransaction, AleoDeployment } from '@demox-labs/aleo-wallet-adapter-base';
export interface LeoWalletEvents {
    connect(...args: unknown[]): unknown;
    disconnect(...args: unknown[]): unknown;
    accountChange(...args: unknown[]): unknown;
}
export interface LeoWallet extends EventEmitter<LeoWalletEvents> {
    publicKey?: string;
    isAvailable(): Promise<boolean>;
    signMessage(message: Uint8Array): Promise<{
        signature: Uint8Array;
    }>;
    decrypt(cipherText: string, tpk?: string, programId?: string, functionName?: string, index?: number): Promise<{
        text: string;
    }>;
    requestRecords(program: string): Promise<{
        records: any[];
    }>;
    requestTransaction(transaction: AleoTransaction): Promise<{
        transactionId?: string;
    }>;
    requestExecution(transaction: AleoTransaction): Promise<{
        transactionId?: string;
    }>;
    requestBulkTransactions(transactions: AleoTransaction[]): Promise<{
        transactionIds?: string[];
    }>;
    requestDeploy(deployment: AleoDeployment): Promise<{
        transactionId?: string;
    }>;
    transactionStatus(transactionId: string): Promise<{
        status: string;
    }>;
    getExecution(transactionId: string): Promise<{
        execution: string;
    }>;
    requestRecordPlaintexts(program: string): Promise<{
        records: any[];
    }>;
    requestTransactionHistory(program: string): Promise<{
        transactions: any[];
    }>;
    connect(decryptPermission: DecryptPermission, network: WalletAdapterNetwork, programs?: string[]): Promise<void>;
    disconnect(): Promise<void>;
}
export interface LeoWindow extends Window {
    leoWallet?: LeoWallet;
    leo?: LeoWallet;
}
export interface LeoWalletAdapterConfig {
    appName?: string;
    isMobile?: boolean;
    mobileWebviewUrl?: string;
}
export declare const LeoWalletName: WalletName<"Leo Wallet">;
export declare class LeoWalletAdapter extends BaseMessageSignerWalletAdapter {
    name: WalletName<"Leo Wallet">;
    icon: string;
    url: string;
    readonly supportedTransactionVersions: any;
    private _connecting;
    private _wallet;
    private _publicKey;
    private _decryptPermission;
    private _readyState;
    constructor({ appName, isMobile, mobileWebviewUrl }?: LeoWalletAdapterConfig);
    get publicKey(): string;
    get decryptPermission(): string;
    get connecting(): boolean;
    get readyState(): WalletReadyState;
    set readyState(readyState: WalletReadyState);
    decrypt(cipherText: string, tpk?: string, programId?: string, functionName?: string, index?: number): Promise<string>;
    requestRecords(program: string): Promise<any[]>;
    requestTransaction(transaction: AleoTransaction): Promise<string>;
    requestExecution(transaction: AleoTransaction): Promise<string>;
    requestBulkTransactions(transactions: AleoTransaction[]): Promise<string[]>;
    requestDeploy(deployment: AleoDeployment): Promise<string>;
    transactionStatus(transactionId: string): Promise<string>;
    getExecution(transactionId: string): Promise<string>;
    requestRecordPlaintexts(program: string): Promise<any[]>;
    requestTransactionHistory(program: string): Promise<any[]>;
    connect(decryptPermission: DecryptPermission, network: WalletAdapterNetwork, programs?: string[]): Promise<void>;
    disconnect(): Promise<void>;
    signMessage(message: Uint8Array): Promise<Uint8Array>;
}
